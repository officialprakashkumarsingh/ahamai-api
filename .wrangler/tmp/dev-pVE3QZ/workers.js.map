{
  "version": 3,
  "sources": ["../../../workers.js", "../../../../home/ubuntu/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../home/ubuntu/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-hbybPt/middleware-insertion-facade.js", "../../../../home/ubuntu/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts", "../bundle-hbybPt/middleware-loader.entry.ts"],
  "sourceRoot": "/workspace/.wrangler/tmp/dev-pVE3QZ",
  "sourcesContent": ["const API_KEY = \"ahamaibyprakash25\";\n\nconst exposedToInternalMap = {\n  // DeepSeek R1 - Free & Uncensored (keeping this one)\n  \"deepseek-r1\": \"NiansuhAI/DeepSeek-R1\",\n  // BrowseByAhamAI - Advanced browsing and analysis model\n  \"BrowseByAhamAI\": \"BrowseByAhamAI\",\n  // Samurai API models with Paid prefix (simple naming)\n  \"claude-sonnet-4\": \"Paid/bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0\",\n  \"claude-opus-4\": \"Paid/bedrock/us.anthropic.claude-opus-4-20250514-v1:0\",\n  \"grok-4\": \"Paid/xai/grok-4\",\n  // Working Samurai API models (tested and functional)\n  \"kimi-k2-instruct\": \"groq/moonshotai/kimi-k2-instruct\",\n  // Working GPT models from Samurai API\n  \"gpt-4o\": \"provider9-gpt-4o\",\n  \"gpt-4o-latest\": \"provider9-gpt-4o-latest\",\n  // Latest cutting-edge models from Samurai API\n  \"o3-mini\": \"provider9-o3-mini\",\n  \"gemini-2.5-flash\": \"provider9-gemini-2.5-flash\",\n  \"gemini-2.0-flash-thinking\": \"provider9-gemini-2.0-flash-thinking\"\n};\n\nconst modelRoutes = {\n  // DeepSeek R1 - keeping original route\n  \"NiansuhAI/DeepSeek-R1\": \"https://fast.typegpt.net/v1/chat/completions\",\n  // BrowseByAhamAI - Special model for browsing and analysis\n  \"BrowseByAhamAI\": \"browsebyahamai\",\n  // Samurai API models with Paid prefix (renamed for client)\n  \"Paid/bedrock/us.anthropic.claude-sonnet-4-20250514-v1:0\": \"https://samuraiapi.in/v1/chat/completions\",\n  \"Paid/bedrock/us.anthropic.claude-opus-4-20250514-v1:0\": \"https://samuraiapi.in/v1/chat/completions\",\n  \"Paid/xai/grok-4\": \"https://samuraiapi.in/v1/chat/completions\",\n  // Working Samurai API models (tested and functional)\n  \"groq/moonshotai/kimi-k2-instruct\": \"https://samuraiapi.in/v1/chat/completions\",\n  // Working GPT models from Samurai API\n  \"provider9-gpt-4o\": \"https://samuraiapi.in/v1/chat/completions\",\n  \"provider9-gpt-4o-latest\": \"https://samuraiapi.in/v1/chat/completions\",\n  // Latest cutting-edge models from Samurai API\n  \"provider9-o3-mini\": \"https://samuraiapi.in/v1/chat/completions\",\n  \"provider9-gemini-2.5-flash\": \"https://samuraiapi.in/v1/chat/completions\",\n  \"provider9-gemini-2.0-flash-thinking\": \"https://samuraiapi.in/v1/chat/completions\"\n};\n\nconst imageModelRoutes = {\n  \"flux\": {\n    provider: \"pollinations\",\n    baseUrl: \"https://image.pollinations.ai/prompt/\",\n    displayName: \"Flux - High Quality\",\n    width: 1024,\n    height: 1024\n  },\n  \"turbo\": {\n    provider: \"pollinations\",\n    baseUrl: \"https://image.pollinations.ai/prompt/\",\n    displayName: \"Turbo - Fast Generation\",\n    width: 1024,\n    height: 1024\n  },\n  \"img3\": {\n    provider: \"infip\",\n    baseUrl: \"https://api.infip.pro/v1/images/generations\",\n    displayName: \"IMG3 - Image Generation\",\n    width: 1024,\n    height: 1024\n  },\n  \"img4\": {\n    provider: \"infip\",\n    baseUrl: \"https://api.infip.pro/v1/images/generations\",\n    displayName: \"IMG4 - Image Generation\",\n    width: 1024,\n    height: 1024\n  },\n  \"uncen\": {\n    provider: \"infip\",\n    baseUrl: \"https://api.infip.pro/v1/images/generations\",\n    displayName: \"Uncen - Image Generation\",\n    width: 1024,\n    height: 1024\n  },\n  // Note: qwen-image model not available with current Samurai API key\n  // Removed old qwen text model as requested\n  \"gemini2.0\": {\n    provider: \"infip\",\n    baseUrl: \"https://api.infip.pro/v1/images/generations\",\n    displayName: \"Gemini 2.0 - Image Generation\",\n    width: 1024,\n    height: 1024\n  }\n};\n\n// Default models configuration\nconst defaultModels = {\n  vision: \"claude-sonnet-4\", // Default vision model\n  webSearch: \"claude-sonnet-4\" // Default web search model\n};\n\n// Dynamic fallback system - automatically detect working models\nfunction getWorkingModels() {\n  // Models known to be reliable based on endpoint\n  const reliableModels = [];\n  \n  // Check which models use reliable endpoints\n  for (const [exposedModel, internalModel] of Object.entries(exposedToInternalMap)) {\n    const route = modelRoutes[internalModel];\n    if (route && (route.includes('samuraiapi.in') || route.includes('fast.typegpt.net'))) {\n      reliableModels.push(exposedModel);\n    }\n  }\n  \n  return reliableModels;\n}\n\n// Model categories for intelligent fallback\nconst modelCategories = {\n  claude: [\"claude-sonnet-4\", \"claude-opus-4\"],\n  openai: [\"gpt-4o\", \"gpt-4o-latest\", \"o3-mini\"],\n  google: [\"gemini-2.5-flash\", \"gemini-2.0-flash-thinking\"],\n  xai: [\"grok-4\"],\n  moonshot: [\"kimi-k2-instruct\"],\n  deepseek: [\"deepseek-r1\"],\n  browse: [\"BrowseByAhamAI\"]\n};\n\n// BrowseByAhamAI External API Helper Functions\nasync function googleSearch(query, numResults = 10) {\n  try {\n    const url = `https://googlesearchapi.nepcoderapis.workers.dev/?q=${encodeURIComponent(query)}&num=${numResults}`;\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Google Search API error:', error);\n    return { error: \"Google Search failed\" };\n  }\n}\n\nasync function webScraper(url) {\n  try {\n    const scrapeUrl = `https://scrap.ytansh038.workers.dev/?url=${encodeURIComponent(url)}`;\n    const response = await fetch(scrapeUrl);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Web Scraper API error:', error);\n    return { error: \"Web scraping failed\" };\n  }\n}\n\nasync function bingSearch(query, state = \"web\", count = 10) {\n  try {\n    const url = `https://microsoftdeepsearch.anshppt19.workers.dev/?search=${encodeURIComponent(query)}&state=${state}&count=${count}`;\n    const response = await fetch(url);\n    return await response.json();\n  } catch (error) {\n    console.error('Bing Search API error:', error);\n    return { error: \"Bing search failed\" };\n  }\n}\n\n// BrowseByAhamAI Fallback Models for different tasks\nconst browseAIFallbacks = {\n  analysis: [\"claude-opus-4\", \"gemini-2.5-flash\", \"gpt-4o-latest\"],\n  vision: [\"grok-4\", \"claude-opus-4\", \"gemini-2.5-flash\"],\n  creative: [\"gemini-2.0-flash-thinking\", \"claude-opus-4\", \"deepseek-r1\"]\n};\n\n// Function to get working fallback model for specific task\nfunction getBrowseAIFallback(taskType = \"analysis\") {\n  const fallbackModels = browseAIFallbacks[taskType] || browseAIFallbacks.analysis;\n  const workingModels = getWorkingModels();\n  \n  for (const model of fallbackModels) {\n    if (workingModels.includes(model)) {\n      return model;\n    }\n  }\n  return workingModels[0]; // Default fallback\n}\n\n// Main BrowseByAhamAI processing function\nasync function processBrowseByAhamAI(requestBody, corsHeaders) {\n  const userMessage = requestBody.messages[requestBody.messages.length - 1]?.content;\n  if (!userMessage) {\n    return new Response(JSON.stringify({ error: \"No user message found\" }), {\n      status: 400,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n    });\n  }\n\n  let content = userMessage;\n  let hasImages = false;\n  \n  // Check if user message contains images (vision capability)\n  if (Array.isArray(userMessage)) {\n    hasImages = userMessage.some(item => item.type === \"image_url\");\n    content = userMessage.find(item => item.type === \"text\")?.text || \"\";\n  }\n\n  // Determine task type and required capabilities\n  let taskType = \"analysis\";\n  let searchResults = null;\n  let scrapedContent = null;\n  let imageResults = null;\n\n  // Check if user wants search functionality\n  if (content.toLowerCase().includes(\"search\") || content.toLowerCase().includes(\"find\") || \n      content.toLowerCase().includes(\"lookup\") || content.toLowerCase().includes(\"browse\")) {\n    \n    // Extract search query\n    const searchQuery = extractSearchQuery(content);\n    \n    // Perform multiple searches in parallel\n    const searchPromises = [\n      googleSearch(searchQuery, 5),\n      bingSearch(searchQuery, \"web\", 5)\n    ];\n\n    // Add image search if needed\n    if (content.toLowerCase().includes(\"image\") || content.toLowerCase().includes(\"picture\") || \n        content.toLowerCase().includes(\"photo\") || hasImages) {\n      searchPromises.push(bingSearch(searchQuery, \"image\", 10));\n      taskType = \"vision\";\n    }\n\n    try {\n      const results = await Promise.all(searchPromises);\n      searchResults = {\n        google: results[0],\n        bing: results[1],\n        images: results[2] || null\n      };\n\n      // If we have good search results, scrape top URLs for more content\n      if (searchResults.google && searchResults.google.length > 0) {\n        const topUrl = searchResults.google[0]?.link;\n        if (topUrl) {\n          scrapedContent = await webScraper(topUrl);\n        }\n      }\n    } catch (error) {\n      console.error('Search operations failed:', error);\n    }\n  }\n\n  // Determine which AI model to use based on task type and image presence\n  let selectedModel;\n  if (hasImages) {\n    selectedModel = getBrowseAIFallback(\"vision\");\n  } else if (content.toLowerCase().includes(\"creative\") || content.toLowerCase().includes(\"story\") || \n             content.toLowerCase().includes(\"imagine\")) {\n    selectedModel = getBrowseAIFallback(\"creative\");\n  } else {\n    selectedModel = getBrowseAIFallback(\"analysis\");\n  }\n\n  // Enhance the original message with search results and context\n  let enhancedContent = content;\n  \n  if (searchResults || scrapedContent) {\n    enhancedContent += \"\\n\\n**BrowseByAhamAI Context:**\\n\";\n    \n    if (searchResults?.google && searchResults.google.length > 0) {\n      enhancedContent += \"\\n**Search Results:**\\n\";\n      searchResults.google.slice(0, 3).forEach((result, index) => {\n        enhancedContent += `${index + 1}. ${result.title}\\n   ${result.snippet}\\n   URL: ${result.link}\\n\\n`;\n      });\n    }\n\n    if (scrapedContent && !scrapedContent.error) {\n      enhancedContent += \"\\n**Additional Content from Top Result:**\\n\";\n      // Extract meaningful text from scraped content (limit to avoid token overflow)\n      const textContent = scrapedContent.content?.replace(/<[^>]*>/g, ' ').substring(0, 2000) || '';\n      enhancedContent += textContent + \"\\n\\n\";\n    }\n\n    if (searchResults?.images && searchResults.images.images?.results) {\n      enhancedContent += \"\\n**Related Images Found:**\\n\";\n      searchResults.images.images.results.slice(0, 5).forEach((imageUrl, index) => {\n        enhancedContent += `${index + 1}. ${imageUrl}\\n`;\n      });\n      enhancedContent += \"\\n\";\n    }\n  }\n\n  // Create enhanced message for the selected AI model\n  let enhancedMessages;\n  if (hasImages) {\n    // For vision tasks, keep the original format but enhance text\n    enhancedMessages = [...requestBody.messages];\n    const lastMessage = enhancedMessages[enhancedMessages.length - 1];\n    if (Array.isArray(lastMessage.content)) {\n      const textIndex = lastMessage.content.findIndex(item => item.type === \"text\");\n      if (textIndex !== -1) {\n        lastMessage.content[textIndex].text = enhancedContent;\n      }\n    }\n  } else {\n    // For text-only tasks\n    enhancedMessages = [\n      ...requestBody.messages.slice(0, -1),\n      {\n        role: \"user\",\n        content: enhancedContent\n      }\n    ];\n  }\n\n  // Add BrowseByAhamAI system prompt\n  const systemPrompt = {\n    role: \"system\",\n    content: `You are BrowseByAhamAI, an advanced AI assistant created by AhamAI that combines web browsing, search, and analysis capabilities. You have access to real-time web search results, scraped content, and image search results. Provide comprehensive, accurate, and insightful responses based on the enhanced context provided. Always acknowledge when you're using web-sourced information and cite sources when available.\n\n**Your capabilities include:**\n- Real-time web search via Google and Bing\n- Web page content scraping and analysis  \n- Image search and vision analysis\n- Multi-source information synthesis\n- Intelligent fallback to specialized AI models\n\n**Response Guidelines:**\n- Use the search results and scraped content to provide current, accurate information\n- Cite sources when referencing web content\n- If images are involved, provide detailed visual analysis\n- Synthesize information from multiple sources for comprehensive answers\n- Mention \"Powered by AhamAI\" in your responses`\n  };\n\n  const enhancedRequestBody = {\n    ...requestBody,\n    messages: [systemPrompt, ...enhancedMessages],\n    model: selectedModel\n  };\n\n  // Forward to the selected AI model with fallback\n  try {\n    const response = await tryModelRequest(selectedModel, enhancedRequestBody, requestBody.stream, corsHeaders);\n    if (response) {\n      return response;\n    }\n    \n    // If primary model fails, try fallbacks\n    const fallbackModels = browseAIFallbacks[taskType] || browseAIFallbacks.analysis;\n    for (const fallbackModel of fallbackModels.slice(1)) {\n      if (getWorkingModels().includes(fallbackModel)) {\n        const fallbackResponse = await tryModelRequest(fallbackModel, enhancedRequestBody, requestBody.stream, corsHeaders);\n        if (fallbackResponse) {\n          return fallbackResponse;\n        }\n      }\n    }\n    \n    throw new Error(\"All BrowseByAhamAI fallback models failed\");\n  } catch (error) {\n    console.error('BrowseByAhamAI processing error:', error);\n    return new Response(JSON.stringify({ \n      error: \"BrowseByAhamAI processing failed\",\n      details: error.message \n    }), {\n      status: 500,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n    });\n  }\n}\n\n// Helper function to extract search query from user message\nfunction extractSearchQuery(content) {\n  // Simple extraction - look for common search patterns\n  const searchPatterns = [\n    /search for (.+)/i,\n    /find (.+)/i,\n    /lookup (.+)/i,\n    /browse (.+)/i,\n    /what is (.+)/i,\n    /tell me about (.+)/i\n  ];\n\n  for (const pattern of searchPatterns) {\n    const match = content.match(pattern);\n    if (match) {\n      return match[1].trim();\n    }\n  }\n\n  // If no pattern matches, use the whole content (cleaned)\n  return content.replace(/search|find|lookup|browse|what is|tell me about/gi, '').trim();\n}\n\nexport default {\n  async fetch(request) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    };\n\n    // Handle preflight requests\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 200,\n        headers: corsHeaders\n      });\n    }\n\n    // Auth check\n    const authHeader = request.headers.get(\"Authorization\");\n    if (!authHeader || authHeader !== `Bearer ${API_KEY}`) {\n      return new Response(JSON.stringify({ error: \"Unauthorized\" }), {\n        status: 401,\n        headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n      });\n    }\n\n    if (path === \"/v1/chat/completions\" && request.method === \"POST\") {\n      return handleChat(request, corsHeaders);\n    }\n\n    if (path === \"/v1/images/generations\" && request.method === \"POST\") {\n      return handleImage(request, corsHeaders);\n    }\n\n    if (path === \"/v1/models\" && request.method === \"GET\") {\n      return handleChatModelList(corsHeaders);\n    }\n\n    if (path === \"/v1/images/models\" && request.method === \"GET\") {\n      return handleImageModelList(corsHeaders);\n    }\n\n    if (path === \"/v1/defaults\" && request.method === \"GET\") {\n      return handleDefaults(corsHeaders);\n    }\n\n    if (path === \"/v1/automation/url\" && request.method === \"POST\") {\n      return handleUrlAutomation(request, corsHeaders);\n    }\n\n    return new Response(JSON.stringify({ error: \"Not found\" }), {\n      status: 404,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n    });\n  }\n};\n\n// Get intelligent fallback model based on the original model's category\nfunction getIntelligentFallback(originalModel) {\n  const workingModels = getWorkingModels();\n  \n  // Find which category the original model belongs to\n  for (const [category, models] of Object.entries(modelCategories)) {\n    if (models.includes(originalModel)) {\n      // Try other models in the same category first\n      for (const model of models) {\n        if (model !== originalModel && workingModels.includes(model)) {\n          return model;\n        }\n      }\n    }\n  }\n  // If no category match or no available models in category, use first working model\n  return workingModels[0];\n}\n\n// Try to make a request with fallback support\nasync function tryModelRequest(modelId, requestBody, stream, corsHeaders) {\n  const internalModel = exposedToInternalMap[modelId];\n  \n  if (!internalModel || !modelRoutes[internalModel]) {\n    return null;\n  }\n\n  // Special handling for BrowseByAhamAI\n  if (internalModel === \"BrowseByAhamAI\") {\n    return await processBrowseByAhamAI(requestBody, corsHeaders);\n  }\n\n  // Special handling for different models\n  let modifiedBody = { ...requestBody };\n  \n  if (internalModel === \"NiansuhAI/DeepSeek-R1\") {\n    // DeepSeek R1 - force uncensored mode by removing system prompts\n    modifiedBody.messages = requestBody.messages.filter(msg => msg.role !== \"system\");\n    console.log(`\uD83D\uDD25 DeepSeek R1 Uncensored Mode: Removed ${requestBody.messages.length - modifiedBody.messages.length} system prompt(s)`);\n  }\n  // For other models - use default app system prompts (no additional branding)\n\n  let headers = { \n    \"Content-Type\": \"application/json\"\n  };\n\n  // Use different authentication for different endpoints\n  if (modelRoutes[internalModel].includes('fast.typegpt.net')) {\n    // For DeepSeek R1 endpoint\n    headers[\"Authorization\"] = \"Bearer sk-BiEn3R0oF1aUTAwK8pWUEqvsxBvoHXffvtLBaC5NApX4SViv\";\n  } else if (modelRoutes[internalModel].includes('samuraiapi.in')) {\n    // For Samurai API endpoint\n    headers[\"Authorization\"] = \"Bearer sk-IvMBi9qmzLiWHl0RpJ9KbyJpczm9YSIHAnMU2aDBbkpbYLF8\";\n  }\n\n  try {\n    const response = await fetch(modelRoutes[internalModel], {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify({ ...modifiedBody, model: internalModel })\n    });\n\n    // Check if response indicates an error\n    if (!response.ok || response.status >= 400) {\n      return null;\n    }\n\n    // For non-streaming, check if response has empty content or errors\n    if (!stream) {\n      const responseText = await response.text();\n      try {\n        const responseJson = JSON.parse(responseText);\n        // Check for various error conditions\n        if (responseJson.error || \n            (responseJson.choices && responseJson.choices[0] && \n             responseJson.choices[0].message && \n             (responseJson.choices[0].message.content === \"\" || \n              responseJson.choices[0].message.content.includes(\"I apologize, but I encountered an error\")))) {\n          return null;\n        }\n        return new Response(responseText, {\n          status: 200,\n          headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n\n    // Return streaming response\n    return new Response(response.body, {\n      status: response.status,\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n        \"Transfer-Encoding\": \"chunked\",\n        \"Cache-Control\": \"no-cache\",\n        ...corsHeaders\n      }\n    });\n\n  } catch (error) {\n    return null;\n  }\n}\n\nasync function handleChat(request, corsHeaders) {\n  const body = await request.json();\n  const exposedModel = body.model;\n  const stream = body.stream === true;\n\n  if (!exposedToInternalMap[exposedModel]) {\n    return new Response(JSON.stringify({ error: `Model '${exposedModel}' is not supported.` }), {\n      status: 400,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n    });\n  }\n\n  // Try the requested model first\n  let result = await tryModelRequest(exposedModel, body, stream, corsHeaders);\n  if (result) {\n    return result;\n  }\n\n  // If original model failed, try intelligent fallback\n  const intelligentFallback = getIntelligentFallback(exposedModel);\n  if (intelligentFallback !== exposedModel) {\n    result = await tryModelRequest(intelligentFallback, body, stream, corsHeaders);\n    if (result) {\n      return result;\n    }\n  }\n\n  // If intelligent fallback failed, try all working models in order\n  const workingModels = getWorkingModels();\n  for (const fallbackModel of workingModels) {\n    if (fallbackModel !== exposedModel && fallbackModel !== intelligentFallback) {\n      result = await tryModelRequest(fallbackModel, body, stream, corsHeaders);\n      if (result) {\n        return result;\n      }\n    }\n  }\n\n  // If all models failed, return error\n  return new Response(JSON.stringify({ \n    error: `Model '${exposedModel}' and all fallback models are currently unavailable. Please try again later.`,\n    attempted_fallbacks: workingModels \n  }), {\n    status: 503,\n    headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n  });\n}\n\n\n\nasync function handleImage(request, corsHeaders) {\n  const body = await request.json();\n  const model = body.model || \"flux\";\n  const prompt = body.prompt || \"\";\n\n  if (!imageModelRoutes[model]) {\n    return new Response(JSON.stringify({ error: `Image model '${model}' is not supported.` }), {\n      status: 400,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n    });\n  }\n\n  const { baseUrl, provider } = imageModelRoutes[model];\n\n  if (provider === \"infip\") {\n    // Handle infip API\n    const requestBody = {\n      model: model,\n      prompt: prompt,\n      n: body.n || 1,\n      size: body.size || \"1024x1024\"\n    };\n\n    const infipResponse = await fetch(baseUrl, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer infip-532d3377`\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!infipResponse.ok) {\n      return new Response(JSON.stringify({ error: \"Failed to generate image\" }), {\n        status: infipResponse.status,\n        headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n      });\n    }\n\n    const result = await infipResponse.json();\n    return new Response(JSON.stringify(result), {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n    });\n  } else {\n    // Handle pollinations API (existing flux/turbo models)\n    const encodedPrompt = encodeURIComponent(prompt);\n    const params = new URLSearchParams({\n      model,\n      width: body.width || 1024,\n      height: body.height || 1024,\n      seed: body.seed || \"\",\n      image: body.image || \"\",\n      private: \"true\",\n      enhance: body.enhance ? \"true\" : \"false\",\n      safe: body.safe ? \"true\" : \"false\",\n      transparent: body.transparent ? \"true\" : \"false\",\n      nologo: \"true\",\n      referrer: \"aham-ai\"\n    });\n\n    const imageUrl = `${baseUrl}${encodedPrompt}?${params.toString()}`;\n    const imageRes = await fetch(imageUrl);\n\n    return new Response(imageRes.body, {\n      status: imageRes.status,\n      headers: {\n        \"Content-Type\": imageRes.headers.get(\"Content-Type\") || \"image/jpeg\",\n        \"Transfer-Encoding\": \"chunked\",\n        ...corsHeaders\n      }\n    });\n  }\n}\n\n\n\nfunction handleChatModelList(corsHeaders = {}) {\n  const chatModels = Object.keys(exposedToInternalMap).map((id) => ({\n    id,\n    object: \"model\",\n    owned_by: \"openai-compatible\"\n  }));\n\n  return new Response(JSON.stringify({\n    object: \"list\",\n    data: chatModels\n  }), {\n    headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n  });\n}\n\nfunction handleImageModelList(corsHeaders = {}) {\n  const models = Object.entries(imageModelRoutes).map(([id, meta]) => ({\n    id,\n    object: \"model\",\n    provider: meta.provider,\n    name: meta.displayName,\n    width: meta.width,\n    height: meta.height,\n    owned_by: meta.provider\n  }));\n\n  return new Response(JSON.stringify({\n    object: \"list\",\n    data: models\n  }), {\n    headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n  });\n}\n\n\n\nfunction handleDefaults(corsHeaders = {}) {\n  return new Response(JSON.stringify({\n    vision: defaultModels.vision,\n    webSearch: defaultModels.webSearch\n  }), {\n    headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n  });\n}\n\nasync function handleUrlAutomation(request, corsHeaders) {\n  const body = await request.json();\n  const { action, url, data } = body;\n\n  // URL automation for various actions\n  const automationResponse = {\n    action,\n    url,\n    success: true,\n    message: `Automation action '${action}' processed`,\n    data: data || {}\n  };\n\n  // Handle different automation actions\n  switch (action) {\n    case 'youtube_search':\n      automationResponse.url = `https://www.youtube.com/results?search_query=${encodeURIComponent(data.query)}`;\n      break;\n    case 'scroll_page':\n      automationResponse.script = `window.scrollTo(0, ${data.position || 0});`;\n      break;\n    case 'fill_input':\n      automationResponse.script = `document.querySelector('${data.selector}').value = '${data.value}';`;\n      break;\n    case 'click_element':\n      automationResponse.script = `document.querySelector('${data.selector}').click();`;\n      break;\n    case 'login':\n      automationResponse.script = `\n        document.querySelector('${data.usernameSelector}').value = '${data.username}';\n        document.querySelector('${data.passwordSelector}').value = '${data.password}';\n        document.querySelector('${data.submitSelector}').click();\n      `;\n      break;\n    default:\n      automationResponse.success = false;\n      automationResponse.message = `Unknown automation action: ${action}`;\n  }\n\n  return new Response(JSON.stringify(automationResponse), {\n    headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\n  });\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/workspace/workers.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/ubuntu/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/ubuntu/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/workspace/workers.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/workspace/.wrangler/tmp/bundle-hbybPt/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/ubuntu/.npm/_npx/32026684e21afda6/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/workspace/.wrangler/tmp/bundle-hbybPt/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/workspace/.wrangler/tmp/bundle-hbybPt/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
